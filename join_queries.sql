## Challenge - Joining on multiple tables

USE sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1.List the number of films per category.*/

SELECT c.name AS category_name, COUNT(f.film_id) AS film_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY film_count DESC;    

-- 2.Retrieve the store ID, city, and country for each store.
SELECT 
	s.store_id,
    c.city, 
    co.country
from 
	store s 
	JOIN address a 
		on s.address_id = a.address_id
	JOIN city c
		on a.city_id = c.city_id
	JOIN country co 
		on c.country_id = co.country_id;

-- 3.Calculate the total revenue generated by each store in dollars.

SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    payment p
    JOIN rental r ON p.rental_id = r.rental_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN store s ON i.store_id = s.store_id
GROUP BY 
    s.store_id
ORDER BY 
    total_revenue DESC;
    
-- 4.Determine the average running time of films for each category.

SELECT 
	c.name as category_name,
    ROUND(AVG(f.length),2) as avg_running_time
FROM 
	category c
    JOIN film_category fc
		on c.category_id = fc.category_id
	JOIN film f
		on fc.film_id = f.film_id
GROUP BY 
	c.name
ORDER BY avg_running_time DESC; 

 -- Bonus:
-- Identify the film categories with the longest average running time.
SELECT 
	c.name as category_name,
    ROUND(AVG(f.length),2) as avg_running_time
FROM 
	category c
    JOIN film_category fc
		on c.category_id = fc.category_id
	JOIN film f
		on fc.film_id = f.film_id
GROUP BY 
	c.name
ORDER BY avg_running_time DESC
LIMIT 5; 

-- Display the top 10 most frequently rented movies in descending order.

SELECT 
	f.title,
    count(r.rental_id) as rental_count
FROM film f 
	JOIN inventory i 
		ON f.film_id=i.film_id
	JOIN rental r 
		ON i.inventory_id = r.inventory_id
GROUP BY 
	f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT 
	i.inventory_id, 
    f.title, 
    s.store_id
FROM 
	inventory i 
		JOIN film f 
			ON i.film_id = f.film_id
		JOIN store s 
			ON i.store_id = s.store_id
WHERE 
	f.title = 'Academy Dinosaur'
	AND
    s.store_id= 1;

/* Provide a list of all distinct film titles, along with their availability status in the inventory. 
   Include a column indicating whether each title is 'Available' or 'NOT available.'  
   Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."*/
   
SELECT 
	f.title,
		CASE WHEN COUNT(i.inventory_id) > 0 THEN 'Availible'
        ELSE 'Not Availible'
		END as avialability
FROM film f  
	LEFT JOIN inventory i 
		ON f.film_id = i.film_id
GROUP BY 
	f.title
ORDER BY
	f.title;

   